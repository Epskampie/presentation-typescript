doctype html
html
  head
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
    title Gulp: JS build system

    link(rel='stylesheet', type='text/css', href='build/build.css')

  body

    article

      section
        h1 typescript:
        h2 javascript + static types

      section
        h1 Wat is typescript?
        br
        ul.text-align-left.bullets
          li
            b Syntax
          li Standaard javascript (es6)
          li + manieren om types te definieren
          li 
           b Compiler
          li Checkt types, geeft errors 
            span.red compile-time checking!
          li Converteerd desgewenst naar ES5
          li Kan los gebruikt worden, maar ook in gulp
          li
            b Autocomplete in editor
          li VS Code
      
      section.medium
        h1 syntax ES6
        div.columns.small.text-align-left.bullets
          div
            pre.small
              code.language-javascript.
                export default class Vec2 {
                    constructor(x = 0, y = 0) {
                        this.x = x;
                        this.y = y;
                    }
                    set(x, y) {
                        this.x = x;
                        this.y = y;
                    }
                    setVec2(other) {
                        this.x = other.x;
                        this.y = other.y;
                    }
                }
          div
            pre.small
              code.language-javascript.
                export default class Vec2 {
                    x: number;
                    y: number;
                    
                    constructor(x: number = 0, y: number = 0) {
                        this.x = x;
                        this.y = y;
                    }
                    set(x, y) {
                        this.x = x;
                        this.y = y;
                    }
                    setVec2(other: Vec2) {
                        this.x = other.x;
                        this.y = other.y;
                    }
                }
                
      section.medium
        h1 syntax typescript
        div.columns.small.text-align-left
          pre.small
            code.language-javascript.
              export default class Vec2 {
                  x: number;
                  y: number;
                  constructor(x: number = 0, y: number = 0) {
                      this.x = x;
                      this.y = y;
                  }
                  set(x, y) {
                      this.x = x;
                      this.y = y;
                  }
                  setVec2(other: Vec2) {
                      this.x = other.x;
                      this.y = other.y;
                  }
              }
          div(style="flex: 0.5").text-align-left.bullets
            pre.small
              code.language-javascript.
                var v = new Vec2(1, '3');
            div.error.
              Argument of type '"3"' is not assignable to parameter of type 'number'.
            pre.small
              code.language-javascript.
                v.set('a', 3);
            div Geen error!
            pre.small
              code.language-javascript.
                set(x: any, y: any) {
                    this.x = x;
                    this.y = y;
                }
        span
              
      section.medium
        h1 Complexer voorbeeld
        div.columns.small.text-align-left
          div
            pre.small
              code.language-javascript.
                class Swapper {
                  
                  constructor(options) {
                    this.doParse = options.doParse;
                    this.amount = options.amount;
                  }
                  
                }
          div.bullets
            pre.small
              code.language-javascript.
                type Options = {
                  doParse: boolean,
                  options: number,
                }
                
                class Swapper {
                  
                  constructor(options: Options) {
                    this.doParse = options.doParse;
                    this.amount = options.amount;
                  }
                  
                }
                
      section.medium
        h1 Complexer voorbeeld
        div.columns.small.text-align-left
          div
            pre.small
              code.language-javascript.
                type Options = {
                  doParse: boolean,
                  amount: number,
                }
                
                class Swapper {
                  
                  constructor(options: Options) {
                    this.doParse = options.doParse;
                    this.amount = options.amount;
                  }
                  
                }
          div(style="flex: 0.5").text-align-left.bullets
            pre.small
              code.language-javascript.
                var swapper = new Swapper({
                    doParse: false,
                });
            .small.error.
              Argument of type '{ doParse: false; }' is not assignable to parameter of type 'Options'.
              Property 'amount' is missing in type '{ doParse: false; }'.
            pre.small
              code.language-javascript.
                type Options = {
                  doParse: boolean,
                  amount?: number,
                }
        span
      
      section
        h1 Libraries
        h2 met bestaande typings
        ul.text-align-left.bullets
          li @types groep in npm
          li 
            code npm install @types/jquery
          li 
            pre.small
              code.language-javascript.
                class ToolRow {
                  $elem: JQuery;
                }
        p
      
      section.medium
        h1 Global libraries
        p in global scope, via &lt;script&gt; tag
        
        .bullets
          code.small //editor.ts:
          pre.small
            code.language-javascript.
              declare global {
                  interface Window {
                      $: JQueryStatic,
                      Modernizr: any,
                      project: Project,
                      exportPdf: {
                          marginValue: number,
                      },
                  }
                  interface JQuery {
                      spectrum(cmd?: string, value?: any): JQuery;
                  }
              }
          code.small //myfile.ts:
          pre.small
            code.language-javascript.
              var Modernizr = window.Modernizr
              // of
              var {Modernizr, $} = window
        span
      
      section
        h1 Is het makkelijk?
        ul.bullets
          li 
            b -
          li externe libraries
          li ingewikkelde constructies
          li
            b +
          li incremental
        
      section
        h1 Is het nuttig?
        ul.bullets
          li 
            b Vind lastige fouten
          li Dubbele declaraties
          li Ontbrekende parameters
          li
            b Autocomplete
          li
            b Refactoring
      
      section
        h1 JA!
        ul.bullets
          li Alleen voor grote codebases
          li Alleen voor nieuwe projecten
      
      section
        h1 VS Code
        ul
          li Typescript hero
          li
            img(src="https://rbbit.gallerycdn.vsassets.io/extensions/rbbit/typescript-hero/1.5.0/1505847119420/Microsoft.VisualStudio.Services.Icons.Default")
          li Sublime text keymap
          
    script(src='build/build.js')